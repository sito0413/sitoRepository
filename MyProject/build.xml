<?xml version="1.0"?>
<project xmlns:jacoco="antlib:org.jacoco.ant" name="Example Ant Build with JaCoCo" default="rebuild">
	<tstamp>
		<format property="NOW" pattern="yyyyMMddHHmmss" />
	</tstamp>
	<property name="src.dir" location="./src"/>
	<property name="architect.dir" location="./manager/frameWork/architect"/>
	<property name="jar.dir" location="./installer/frameWork/architect/jar"/>
	<property name="result.dir" location="./target"/>
	<property name="result.classes.dir" location="${result.dir}/classes"/>
	<property name="result.report.dir" location="${result.dir}/jacoco"/>
	<property name="result.exec.file" location="${result.dir}/jacoco.exec"/>
	<property name="result.test.dir" location="${result.dir}/test"/>
	<property name="result.test.class.dir" location="${result.test.dir}/classes"/>

	<!--  Step 1: Import JaCoCo Ant tasks  -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="./lib/jacocoant.jar"/>
	</taskdef>

	<target name="clean">
		<delete dir="${result.dir}"/>
	</target>

	<target name="compile">
		<mkdir dir="${result.classes.dir}"/>
        <path id="classpath">
        	<fileset dir="./lib" includes="*.jar"/>
        </path>
        <javac  srcdir="${src.dir}" destdir="${result.classes.dir}" debug="true" includeantruntime="false">
			<classpath refid="classpath" />
        </javac>

		<fileset id="test" dir="./lib" includes="/**/*.jar"/>
		<pathconvert pathsep="&#xA;" property="filelist" refid="test" />
		<echo file="${jar.dir}/info.xml" message="&lt;?xml version=&quot;1.0&quot; encoding=&quot;Shift_JIS&quot; standalone=&quot;no&quot;?&gt;&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;&lt;properties&gt;&lt;entry key=&quot;Path&quot;&gt;${filelist}&lt;/entry&gt;&lt;/properties&gt;" encoding="Shift_JIS"/>
		<echo file="${architect.dir}/info.xml" message="&lt;?xml version=&quot;1.0&quot; encoding=&quot;Shift_JIS&quot; standalone=&quot;no&quot;?&gt;&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;&lt;properties&gt;&lt;entry key=&quot;Ver&quot;&gt;${NOW}&lt;/entry&gt;&lt;/properties&gt;" encoding="Shift_JIS"/>
		<copy todir="${jar.dir}" >
	    	<fileset dir="./lib" includes="/**/*.jar"/>
	    </copy>
		<jar jarfile="${jar.dir}/framework.jar">
			<fileset dir="${result.classes.dir}" includes="**/*.class" />
			<fileset dir="./src" includes="**/*.png" />
			<fileset dir="./src" includes="**/*.java" />
			<fileset dir="./src" includes="**/*.ttf" />
			<fileset dir="./src" includes="**/*.xml" />
		</jar>


		<mkdir dir="./jar"/>
		<jar jarfile="./jar/framework.jar">
			<fileset dir="${result.classes.dir}" includes="**/*.class" />
			<fileset dir="./src" includes="**/*.png" />
			<fileset dir="./src" includes="**/*.java" />
			<fileset dir="./src" includes="**/*.ttf" />
			<fileset dir="./src" includes="**/*.jar" />
			<fileset dir="./src" includes="**/*.xml" />
		</jar>
		<mkdir dir="./jar/${NOW}"/>
		<copy todir="./jar/${NOW}" >
	    	<fileset dir="./jar" includes="framework.jar"/>
	    </copy>
	</target>

	<!--  Step 2: Wrap test execution with the JaCoCo coverage task-->
	<target name="test" depends="compile">
		<mkdir dir="${result.test.dir}"/>
		<mkdir dir="${result.test.class.dir}"/>
		<path id="classpath">
			<fileset dir="${jar.dir}" includes="*.jar"/>
		</path>
		<javac srcdir="./test" destdir="${result.test.class.dir}" encoding="utf-8">
			<classpath refid="classpath" />
		</javac>
		<jacoco:coverage destfile="${result.exec.file}">
		    <junit fork="true" forkmode="once">
				<formatter type="xml" />
				<classpath>
					<path path="${result.test.class.dir}" />
					<fileset dir="${jar.dir}" includes="/**/*.jar"/>
				</classpath>
				<batchtest todir="${architect.dir}">
					<fileset dir="./test">
						<include name="**/AllTests.java" />
					</fileset>
				</batchtest>
		    </junit>
		</jacoco:coverage>
	</target>
	<!--  Step 3: Create coverage report  -->
	<target name="report" depends="test">
		<jacoco:report>
			<executiondata>
				<file file="${result.exec.file}"/>
			</executiondata>
			<structure name="カバレッジ">
				<classfiles>
					<fileset dir="${result.classes.dir}"/>
				</classfiles>
			<sourcefiles encoding="UTF-8">
				<fileset dir="${src.dir}"/>
			</sourcefiles>
			</structure>
			<!--  to produce reports in different formats.  -->
			<html destdir="${result.report.dir}"/>
			<xml destfile="${architect.dir}/result.xml"/>
		</jacoco:report>
	</target>

	<target name="rebuild" depends="clean,compile,test,report"/>
</project>